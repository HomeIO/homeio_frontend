// Generated by CoffeeScript 1.3.3
(function() {
  var app;

  app = $.sammy("#main", function() {
    this.use("Haml");
    this.get("#/", function(context) {
      context.app.swap('');
      return context.render("/assets/templates/index.haml").appendTo(context.$element());
    });
    this.get("#/measurements", function(context) {
      return this.load("/api/meas.json").then(function(data) {
        return context.partial("/assets/templates/meas/index.haml", function(html) {
          var index, meas, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            meas = _ref[index];
            _results.push(context.render("/assets/templates/meas/_index_item.haml", {
              meas: meas
            }, function(meas_html) {
              return $("#measArray").append(meas_html);
            }));
          }
          return _results;
        });
      });
    });
    this.get("#/measurements/:measName", function(context) {
      context.app.swap('');
      return this.load("/api/meas/" + this.params["measName"] + "/.json").then(function(data) {
        var meas;
        meas = data["object"];
        return context.render("/assets/templates/meas/show.haml", {
          meas: meas
        }).appendTo(context.$element());
      });
    });
    this.get("#/measurements/:measName/graph3", function(context) {
      var _this = this;
      context.app.swap('');
      context.render("/assets/templates/meas/graph2.haml", {
        meas_name: this.params["measName"]
      }).then(function(html) {});
      return html.appendTo(context.$element());
    });
    this.get("#/measurements/:measName/graph", function(context) {
      context.app.swap('');
      return context.render("/assets/templates/meas/graph2.haml", {
        meas_name: this.params["measName"]
      }).appendTo(context.$element());
    });
    this.get("#/measurements/:measName/graph4", function(context) {
      return this.load("/api/meas/" + this.params["measName"] + "/.json").then(function(meas_data) {
        var meas;
        meas = meas_data["object"];
        return this.load("/api/meas/" + meas.name + "/raw_for_index/0/100/.json").then(function(graph_data) {
          return context.render("/assets/templates/meas/graph.haml", {
            meas: meas,
            graph_data: graph_data
          }).appendTo(context.$element()).then(function(html) {
            var g;
            g = new HomeIOMeasGraphOld;
            return g.meas_graph(meas_data, graph_data, "#graph");
          });
        });
      });
    });
    this.get("#/actions", function(context) {
      return this.load("/api/actions.json").then(function(data) {
        return context.partial("/assets/templates/actions/index.haml", function(html) {
          var action, index, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            action = _ref[index];
            _results.push(context.render("/assets/templates/actions/_index_item.haml", {
              action: action
            }, function(action_html) {
              return $("#actionArray").append(action_html);
            }));
          }
          return _results;
        });
      });
    });
    this.get("#/actions/:actionName", function(context) {
      context.app.swap('');
      return this.load("/api/actions/" + this.params["actionName"] + "/.json").then(function(data) {
        var action;
        action = data["object"];
        return context.render("/assets/templates/actions/show.haml", {
          action: action
        }).appendTo(context.$element());
      });
    });
    this.get("#/overseers", function(context) {
      return this.load("/api/overseers.json").then(function(data) {
        return context.partial("/assets/templates/overseers/index.haml", function(html) {
          var index, overseer, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            overseer = _ref[index];
            _results.push(context.render("/assets/templates/overseers/_index_item.haml", {
              overseer: overseer
            }, function(overseer_html) {
              return $("#overseerArray").append(overseer_html);
            }));
          }
          return _results;
        });
      });
    });
    return this.get("#/overseers/:overseerName", function(context) {
      context.app.swap('');
      return this.load("/api/overseers/" + this.params["overseerName"] + "/.json").then(function(data) {
        var overseer;
        overseer = data["object"];
        return context.render("/assets/templates/overseers/show.haml", {
          overseer: overseer
        }).appendTo(context.$element());
      });
    });
  });

  $(function() {
    return app.run("#/");
  });

}).call(this);
