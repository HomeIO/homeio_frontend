// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.HomeIOMeasGraph = (function() {

    function HomeIOMeasGraph() {
      this.getRaw = __bind(this.getRaw, this);
      this.buffer = [];
      this.periodicInterval = 1000;
      this.maxBufferSize = 100;
      this.onlyOneRawValue = false;
      this.flot_options = {
        series: {
          lines: {
            show: true,
            fill: true
          },
          points: {
            show: false
          }
        },
        legend: {
          show: true
        },
        grid: {
          clickable: false,
          hoverable: true
        }
      };
    }

    HomeIOMeasGraph.prototype.prepare = function() {
      return this.getMeas();
    };

    HomeIOMeasGraph.prototype.currentTime = function() {
      return (new Date()).getTime();
    };

    HomeIOMeasGraph.prototype.getMeas = function() {
      var _this = this;
      return $.getJSON("/api/meas/" + this.meas_name + "/.json", function(data) {
        _this.meas = data.object;
        _this.getFrom = _this.meas.buffer.lastTime;
        _this.getTo = _this.meas.buffer.lastTime;
        _this.localTimeOffset = _this.meas.buffer.lastTime - _this.currentTime();
        console.log(_this.localTimeOffset);
        _this.getRaw();
        return setInterval(_this.getRaw, _this.periodicInterval);
      });
    };

    HomeIOMeasGraph.prototype.getRaw = function() {
      var url,
        _this = this;
      this.getTo = this.currentTime() + this.localTimeOffset;
      if (this.onlyOneRawValue) {
        url = "/api/meas/" + this.meas.name + "/raw_for_index/0/0/.json";
      } else {
        url = "/api/meas/" + this.meas.name + "/raw_for_time/" + this.getFrom + "/" + this.getTo + "/.json";
      }
      return $.getJSON(url, function(data) {
        _this.getFrom = _this.getTo;
        _this.interval = data.interval;
        _this.addToBuffer(data.data);
        return _this.renderGraph();
      });
    };

    HomeIOMeasGraph.prototype.addToBuffer = function(array) {
      var d, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        d = array[_i];
        if (this.buffer.length >= this.maxBufferSize) {
          this.buffer.shift();
        }
        _results.push(this.buffer.push(d));
      }
      return _results;
    };

    HomeIOMeasGraph.prototype.renderGraph = function() {
      var d, i, new_d, new_data, x, y, _i, _len, _ref;
      new_data = [];
      i = 0;
      _ref = this.buffer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        x = ((i - this.buffer.length) * this.interval) / 1000.0;
        y = (parseFloat(d) + this.meas.coefficientOffset) * this.meas.coefficientLinear;
        new_d = [x, y];
        new_data.push(new_d);
        i += 1;
      }
      new_data = {
        data: new_data,
        color: "#55f",
        label: name
      };
      if (this.plot) {
        this.plot.setData([new_data]);
        this.plot.setupGrid();
        return this.plot.draw();
      } else {
        return this.plot = $.plot($(this.element), [new_data], this.flot_options);
      }
    };

    return HomeIOMeasGraph;

  })();

}).call(this);
