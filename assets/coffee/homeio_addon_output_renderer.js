// Generated by CoffeeScript 1.10.0
(function() {
  this.HomeIOAddonOutputRenderer = (function() {
    function HomeIOAddonOutputRenderer() {
      this.name = null;
      this.container = null;
      this.addonObject = null;
    }

    HomeIOAddonOutputRenderer.prototype.start = function() {
      return this.getFromApi();
    };

    HomeIOAddonOutputRenderer.prototype.getFromApi = function() {
      return $.getJSON("/api/addons/" + this.name + "/.json", (function(_this) {
        return function(data) {
          _this.addonObject = data.object;
          return _this.render();
        };
      })(this));
    };

    HomeIOAddonOutputRenderer.prototype.render = function() {
      if (this.addonObject["array"]) {
        return this.renderArray(this.addonObject["array"], this.addonObject["keys"]);
      }
    };

    HomeIOAddonOutputRenderer.prototype.renderArray = function(array, keys) {
      var cellHtml, headHtml, i, j, k, key, keyDef, len, len1, len2, row, rowHtml, tableHtml;
      tableHtml = $('<table></table>').addClass('pure-table pure-table-striped addonDynamicTable');
      headHtml = $('<thead></thead');
      tableHtml.append(headHtml);
      rowHtml = $('<tr></tr>');
      headHtml.append(rowHtml);
      for (i = 0, len = keys.length; i < len; i++) {
        keyDef = keys[i];
        key = keyDef.key;
        cellHtml = $('<th></th>').text(key);
        rowHtml.append(cellHtml);
      }
      for (j = 0, len1 = array.length; j < len1; j++) {
        row = array[j];
        rowHtml = $('<tr></tr>');
        tableHtml.append(rowHtml);
        for (k = 0, len2 = keys.length; k < len2; k++) {
          keyDef = keys[k];
          cellHtml = $('<td></td>').text(this.processValue(row, keyDef));
          rowHtml.append(cellHtml);
        }
      }
      return $(this.container).append(tableHtml);
    };

    HomeIOAddonOutputRenderer.prototype.timeToString = function(t) {
      var date, formattedTime;
      date = new Date(parseInt(t));
      formattedTime = date.getHours() + ':' + ('0' + date.getMinutes().toString()).slice(-2) + ':' + ('0' + date.getSeconds().toString()).slice(-2);
      return formattedTime;
    };

    HomeIOAddonOutputRenderer.prototype.processValue = function(row, keyDef) {
      var value;
      value = row[keyDef.key];
      if (keyDef.type === "time") {
        value = this.timeToString(value);
      }
      if (keyDef.coeff) {
        value *= keyDef.coeff;
      }
      if (keyDef.type === "float") {
        value = Number(parseFloat(value)).toFixed(2);
      }
      if (keyDef.unit) {
        value = value + " " + keyDef.unit;
      }
      if (keyDef.type === "interval") {
        if (value === 0) {
          value = "0 s";
        } else {
          value = moment().add(value).fromNow(true);
        }
      }
      return value;
    };

    return HomeIOAddonOutputRenderer;

  })();

}).call(this);
