// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.HomeIOMeasGraphMulti = (function() {
    function HomeIOMeasGraphMulti() {
      this.plotGraph = bind(this.plotGraph, this);
      this.fetchRawData = bind(this.fetchRawData, this);
      this.recalculateTimeRanges = bind(this.recalculateTimeRanges, this);
      this.renderGraph = bind(this.renderGraph, this);
      this.renderControls = bind(this.renderControls, this);
      this.container = null;
      this.meases = [];
      this.measesHash = {};
      this.settings = {};
      this.enabled = {};
      this.buffer = {};
      this.lastTime = {};
      this.timeFrom = null;
      this.timeTo = null;
      this.timeRange = 120 * 1000;
      this.periodicInterval = 4000;
      this.periodicDynamic = false;
      this.periodicDynamicMultiplier = 5;
      this.periodicDynamicMinimum = 2000;
      this.serverTimeOffset = 0;
      this.flotOptions = {
        series: {
          lines: {
            show: true,
            fill: true
          },
          points: {
            show: false
          }
        },
        legend: {
          show: true
        },
        grid: {
          clickable: false,
          hoverable: true
        },
        xaxis: {
          mode: "time",
          timezone: "browser"
        }
      };
    }

    HomeIOMeasGraphMulti.prototype.start = function() {
      return this.getFromApi();
    };

    HomeIOMeasGraphMulti.prototype.currentTime = function() {
      return (new Date()).getTime();
    };

    HomeIOMeasGraphMulti.prototype.getFromApi = function() {
      return $.getJSON("/api/settings.json", (function(_this) {
        return function(data) {
          _this.settings = data;
          return $.getJSON("/api/meas.json", function(data) {
            var j, len, meas, ref;
            _this.meases = data.array;
            if (_this.meases.length > 0) {
              _this.serverTimeOffset = _this.meases[0].buffer.lastTime - _this.currentTime();
            }
            ref = _this.meases;
            for (j = 0, len = ref.length; j < len; j++) {
              meas = ref[j];
              _this.measesHash[meas.name] = meas;
              _this.buffer[meas.name] = [];
            }
            return _this.render();
          });
        };
      })(this));
    };

    HomeIOMeasGraphMulti.prototype.render = function() {
      this.renderControls();
      this.renderGraph();
      return setInterval(this.renderGraph, this.periodicInterval);
    };

    HomeIOMeasGraphMulti.prototype.renderControls = function() {
      var checkboxId, div, j, len, meas, ref;
      this.containerCheckbox = this.container + "_checkboxes";
      this.containerGraph = this.container + "_graph";
      $(this.container).addClass("multi-graph-container");
      $("<div\>", {
        id: this.containerGraph.replace("#", ""),
        "class": "multi-graph-graph-container resizable"
      }).appendTo($(this.container));
      $("<div\>", {
        id: this.containerCheckbox.replace("#", ""),
        "class": "multi-graph-checkbox-container"
      }).appendTo($(this.container));
      ref = this.meases;
      for (j = 0, len = ref.length; j < len; j++) {
        meas = ref[j];
        checkboxId = this.containerCheckbox.replace("#", "") + "_" + meas.name;
        div = $("<div\>", {
          "class": "multi-graph-checkbox-element"
        });
        $("<input\>", {
          type: "checkbox",
          name: meas.name,
          id: checkboxId,
          checked: null,
          "class": "multi-graph-checkbox",
          "data-meas-name": meas.name
        }).appendTo(div);
        $("<label>" + meas.name + "</label>", {
          "for": checkboxId
        }).appendTo(div);
        div.appendTo($(this.containerCheckbox));
      }
      $(".multi-graph-checkbox").change((function(_this) {
        return function(event) {
          var name, obj;
          obj = $(event.currentTarget);
          name = obj.data("meas-name");
          _this.enabled[name] = obj.is(':checked');
          if (_this.enabled[name] !== true) {
            _this.buffer[name] = [];
            _this.lastTime[name] = null;
          }
          return _this.renderGraph();
        };
      })(this));
      return $(this.containerGraph).resize((function(_this) {
        return function(event) {
          _this.plot = null;
          return _this.plotGraph();
        };
      })(this));
    };

    HomeIOMeasGraphMulti.prototype.renderGraph = function() {
      this.recalculateTimeRanges();
      this.normalizeDataForTime();
      return this.fetchRawData();
    };

    HomeIOMeasGraphMulti.prototype.recalculateTimeRanges = function() {
      this.timeTo = this.currentTime();
      return this.timeFrom = this.timeTo - this.timeRange;
    };

    HomeIOMeasGraphMulti.prototype.normalizeDataForTime = function() {
      var d, j, k, len, len1, meas, newBuffer, oldBuffer, ref, results, timeFrom, timeTo;
      timeFrom = this.timeFrom + this.serverTimeOffset;
      timeTo = this.timeTo + this.serverTimeOffset;
      ref = this.meases;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        meas = ref[j];
        oldBuffer = this.buffer[meas.name];
        newBuffer = [];
        for (k = 0, len1 = oldBuffer.length; k < len1; k++) {
          d = oldBuffer[k];
          if ((d[0] >= timeFrom) && (d[0] <= timeTo)) {
            newBuffer.push(d);
          }
        }
        newBuffer = newBuffer.sort(function(a, b) {
          return a[0] - b[0];
        });
        this.buffer[meas.name] = newBuffer;
        if (newBuffer.length > 0) {
          results.push(this.lastTime[meas.name] = newBuffer[newBuffer.length - 1][0]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    HomeIOMeasGraphMulti.prototype.fetchRawData = function() {
      var j, len, measName, ref, timeFrom, timeTo, url;
      ref = Object.keys(this.enabled);
      for (j = 0, len = ref.length; j < len; j++) {
        measName = ref[j];
        if (this.enabled[measName]) {
          timeFrom = this.timeTo - this.timeRange;
          console.log(this.lastTime);
          if (this.lastTime[measName]) {
            timeFrom = this.lastTime[measName];
          }
          timeFrom += this.serverTimeOffset;
          timeTo = this.timeTo + this.serverTimeOffset;
          url = "/api/meas/" + measName + "/raw_for_time/" + timeFrom + "/" + timeTo + "/.json";
          $.getJSON(url, (function(_this) {
            return function(response) {
              var d, i, k, len1, length, ref1, results, x, y;
              measName = response.meas_type;
              length = response.data.length;
              i = 0;
              ref1 = response.data;
              results = [];
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                d = ref1[k];
                x = response.lastTime - ((length - i) * response.interval);
                y = (parseFloat(d) + _this.measesHash[measName].coefficientOffset) * _this.measesHash[measName].coefficientLinear;
                i += 1;
                results.push(_this.buffer[measName].push([x, y]));
              }
              return results;
            };
          })(this));
        }
      }
      return this.plotGraph();
    };

    HomeIOMeasGraphMulti.prototype.plotGraph = function() {
      var graphData, j, len, measName, ref;
      graphData = [];
      ref = Object.keys(this.buffer);
      for (j = 0, len = ref.length; j < len; j++) {
        measName = ref[j];
        if (this.enabled[measName]) {
          graphData.push({
            "label": measName,
            "data": this.buffer[measName]
          });
        }
      }
      if (this.plot) {
        this.plot.setData(graphData);
        this.plot.setupGrid();
        return this.plot.draw();
      } else {
        return this.plot = $.plot($(this.containerGraph), graphData, this.flotOptions);
      }
    };

    return HomeIOMeasGraphMulti;

  })();

}).call(this);
