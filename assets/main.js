// Generated by CoffeeScript 1.3.3
(function() {
  var app;

  this.HomeIOMeasGraph = (function() {

    function HomeIOMeasGraph() {}

    HomeIOMeasGraph.prototype.meas_graph = function(meas_data, graph_data, element) {
      var buffer, center_unix_rel_time, chart_length, coefficient_linear, coefficient_offset, current_time, d, factor, flot_options, i, interval, last_time, latest_unix_rel_time, max_page, new_d, new_data, offset_unix_rel_time, oldest_unix_rel_time, page, smooth_data, time_offset, time_offset_last, time_range, unit, x, y, _i, _len;
      console.log(graph_data);
      console.log(meas_data);
      flot_options = {
        series: {
          lines: {
            show: true,
            fill: true
          },
          points: {
            show: false
          }
        },
        legend: {
          show: true
        },
        grid: {
          clickable: false,
          hoverable: true
        }
      };
      page = 0;
      buffer = graph_data["data"];
      coefficient_linear = meas_data["object"]["coefficientLinear"];
      coefficient_offset = meas_data["object"]["coefficientOffset"];
      interval = graph_data["interval"];
      last_time = graph_data["lastTime"];
      current_time = (new Date).getTime();
      time_offset = last_time - current_time - page * interval * buffer.length;
      time_offset_last = current_time - last_time;
      chart_length = $(element).width();
      max_page = 1;
      unit = "unit";
      new_data = [];
      i = 0;
      for (_i = 0, _len = buffer.length; _i < _len; _i++) {
        d = buffer[_i];
        x = -1 * i * interval + time_offset;
        y = (parseFloat(d) + coefficient_offset) * coefficient_linear;
        console.log(d, coefficient_offset, coefficient_linear);
        new_d = [x, y];
        new_data.push(new_d);
        i += 1;
      }
      if (new_data.length > chart_length) {
        factor = Math.ceil(parseFloat(new_data.length) / parseFloat(chart_length));
        smooth_data = averageData(new_data, factor + smooth);
        new_data = smooth_data;
      }
      if (buffer.length > 0) {
        time_range = new_data[0][0] - new_data[new_data.length - 1][0];
      }
      latest_unix_rel_time = new_data[0][0];
      oldest_unix_rel_time = new_data[new_data.length - 1][0];
      center_unix_rel_time = (latest_unix_rel_time + oldest_unix_rel_time) / 2.0;
      offset_unix_rel_time = latest_unix_rel_time - center_unix_rel_time;
      new_data = {
        data: new_data,
        color: "#55f",
        label: name
      };
      console.log(new_data);
      return $.plot($(element), [new_data], flot_options);
    };

    return HomeIOMeasGraph;

  })();

  app = $.sammy("#main", function() {
    this.use("Haml");
    this.get("#/", function(context) {
      context.app.swap('');
      return context.render("/assets/templates/index.haml").appendTo(context.$element());
    });
    this.get("#/measurements", function(context) {
      return this.load("/api/meas.json").then(function(data) {
        return context.partial("/assets/templates/meas/index.haml", function(html) {
          var index, meas, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            meas = _ref[index];
            _results.push(context.render("/assets/templates/meas/_index_item.haml", {
              meas: meas
            }, function(meas_html) {
              return $("#measArray").append(meas_html);
            }));
          }
          return _results;
        });
      });
    });
    this.get("#/measurements/:measName", function(context) {
      context.app.swap('');
      return this.load("/api/meas/" + this.params["measName"] + "/.json").then(function(data) {
        var meas;
        meas = data["object"];
        return context.render("/assets/templates/meas/show.haml", {
          meas: meas
        }).appendTo(context.$element());
      });
    });
    this.get("#/measurements/:measName/graph", function(context) {
      context.app.swap('');
      return this.load("/api/meas/" + this.params["measName"] + "/.json").then(function(meas_data) {
        var meas;
        meas = meas_data["object"];
        return this.load("/api/meas/" + meas.name + "/raw_for_index/0/100/.json").then(function(graph_data) {
          return context.render("/assets/templates/meas/graph.haml", {
            meas: meas,
            graph_data: graph_data
          }).appendTo(context.$element()).then(function(html) {
            var h;
            h = new HomeIOMeasGraph;
            return h.meas_graph(meas_data, graph_data, "#graph");
          });
        });
      });
    });
    this.get("#/actions", function(context) {
      return this.load("/api/actions.json").then(function(data) {
        return context.partial("/assets/templates/actions/index.haml", function(html) {
          var action, index, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            action = _ref[index];
            _results.push(context.render("/assets/templates/actions/_index_item.haml", {
              action: action
            }, function(action_html) {
              return $("#actionArray").append(action_html);
            }));
          }
          return _results;
        });
      });
    });
    this.get("#/actions/:actionName", function(context) {
      context.app.swap('');
      return this.load("/api/actions/" + this.params["actionName"] + "/.json").then(function(data) {
        var action;
        action = data["object"];
        return context.render("/assets/templates/actions/show.haml", {
          action: action
        }).appendTo(context.$element());
      });
    });
    this.get("#/overseers", function(context) {
      return this.load("/api/overseers.json").then(function(data) {
        return context.partial("/assets/templates/overseers/index.haml", function(html) {
          var index, overseer, _i, _len, _ref, _results;
          $("#main").html(html);
          _ref = data["array"];
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            overseer = _ref[index];
            _results.push(context.render("/assets/templates/overseers/_index_item.haml", {
              overseer: overseer
            }, function(overseer_html) {
              return $("#overseerArray").append(overseer_html);
            }));
          }
          return _results;
        });
      });
    });
    return this.get("#/overseers/:overseerName", function(context) {
      context.app.swap('');
      return this.load("/api/overseers/" + this.params["overseerName"] + "/.json").then(function(data) {
        var overseer;
        overseer = data["object"];
        return context.render("/assets/templates/overseers/show.haml", {
          overseer: overseer
        }).appendTo(context.$element());
      });
    });
  });

  $(function() {
    return app.run("#/");
  });

}).call(this);
